sim = simulator.SimulatorConvexRoom();
set(sim, ...
    'MaximumDelay', 0.05, ...
    'PreDelay', 0.0, ...
    'ReverberationMaxOrder', 8,...
    'HRIRDataset', simulator.DirectionalIR( ...
        'impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_3m.sofa'), ...
    'Sources', {simulator.source.ISMShoeBox(sim)}, ...
    'Sinks', simulator.AudioSink(2), ...
    'Walls', simulator.Wall ...
    );
set(sim.Sources{1}, ...
    'Name', 'Cello', ...
    'Position', [2.5; 2.5; 0], ...
    'AudioBuffer', simulator.buffer.FIFO(1) ...
    );
set(sim.Sources{1}.AudioBuffer, ...
    'File', 'stimuli/anechoic/instruments/anechoic_cello.wav' ...
    );

% define floor of the room
set(sim.Walls(1), ...
    'Name', 'Room', ...
    'Vertices', [3 -3; 3 3; -3 3; -3 -3]', ...
    'Position', [0; 0; -1.75], ...
    'UnitFront', [0; 0; 1], ...
    'UnitUp', [0; 1; 0] ...
    ); 
% createUniformPrism(height, mode, RT60) creates the whole room
%   height:  height in metre of resulting room
%   mode:    '2D' for skipping the floor and the ceiling of the room
%            '3D' for including the floor and the ceiling of the room
%   RT60:    RT60 in seconds (used to calculate absorptions coefficients using
%            Sabine's formula
sim.Walls = sim.Walls(1).createUniformPrism(2.50, '2D', 2.3);

sim.set('Init',true);
while ~sim.isFinished()
    sim.set('Refresh',true);  % refresh all objects
    sim.set('Process',true);
end
data = sim.Sinks.getData();
sim.Sinks.saveFile('out_room.wav',sim.SampleRate);
sim.set('ShutDown',true);
